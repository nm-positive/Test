name: Python Application Build and Release

# Billing
# 'Usage limits billing and administration' https://docs.github.com/ko/actions/learn-github-actions/usage-limits-billing-and-administration
# '**Disabling or limiting GitHub Actions for your repository or organization' https://docs.github.com/ko/actions/learn-github-actions/usage-limits-billing-and-administration#disabling-or-limiting-github-actions-for-your-repository-or-organization

# Github Action 
# 'on' https://docs.github.com/ko/actions/using-workflows/workflow-syntax-for-github-actions#on
# 'filter' https://docs.github.com/ko/actions/using-workflows/workflow-syntax-for-github-actions#using-filters
on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-deploy:
    runs-on: windows-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      with:
        # 모든 TAG 와 COMMIT 을 가져오기 위한 값 ( 해당 값이 아닌 경우 하단의 스탭에서 정상적인 조회가 되지 않음 )
        fetch-depth: 0  

    - name: Install Python 3.11
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'

    - name: Install Python Requirements
      run: pip install -r requirements.txt

    - name: Install Python PyInstaller
      run: pip install pyinstaller

    - name: PyInstaller Build Executable
      run: |
        ls
        pyinstaller -F -n=sample .\main.py
        ls

    - name: Archive Executable and Keys
      run: |
        Compress-Archive -Path dist\sample.exe -DestinationPath release.zip

    - name: Tag Info
      id: update_tag_range
      run: |
          # 최신 태그 조회
          $CURRENT_TAG = git describe --tags --abbrev=0
          echo "CURRENT_TAG=$CURRENT_TAG" | Out-File -Append -FilePath $env:GITHUB_ENV
          echo "Current Tag: $CURRENT_TAG"
          # 최신 태그를 제외한 마지막 태그 조회
          $PREVIOUS_TAG = git describe --tags --abbrev=0 $CURRENT_TAG^
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" | Out-File -Append -FilePath $env:GITHUB_ENV          
          echo "Previous Tag: $PREVIOUS_TAG"
          # 마지막 태그 부터의 모든 커밋 정보를 조회
          $CHANGED_REVISIONS_RESULT = git log "$PREVIOUS_TAG.." --pretty=format:"[%h] %s"
          $CHANGED_REVISIONS = $CHANGED_REVISIONS_RESULT -join "<br>"
          # 1234567
          echo "CHANGED_REVISIONS=$CHANGED_REVISIONS" | Out-File -Append -FilePath $env:GITHUB_ENV
          echo $CHANGED_REVISIONS

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: ${{ env.CHANGED_REVISIONS }}
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release.zip
        asset_name: release.zip
        asset_content_type: application/zip

    - name: Send Telegram API
      run: |
        $text = "[Update]`n" +
        "${{ steps.create_release.outputs.html_url }}`n" +
        "Test"

        $body = @{
          chat_id = -4005607947
          text = $text
        } | ConvertTo-Json

        $url = 'https://api.telegram.org/bot6923806515:AAG2unZK-A2oKn6bKZx5Akz1a_TzrDqhbpc/sendMessage'

        $response = Invoke-RestMethod -Uri $url -Method 'POST' -Body $body -ContentType 'application/json'
        echo "Response: $response"
